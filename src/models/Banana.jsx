/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useState } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";

export default function Banana(props) {
    const bananaRef = useRef(null)

    const { nodes, materials } = useGLTF("/static/banana.glb");
    const [rotateBanana, setRotateBanana] = useState(false)

   useFrame((state, delta)=>{
       if(rotateBanana){
           bananaRef.current.rotation.x += Math.sin(state.clock.elapsedTime) * delta
           bananaRef.current.children[0].material.color.set(`hsl(${Math.random()*360},100%, 50%)`)
           //bananaRef.current.position.y += Math.sin(state.clock.elapsedTime) * delta
       }
          
   })

   const onHandleBanana = (event) => {
       setRotateBanana(true)
       console.log(event)
   }

    return (
        <group ref={bananaRef} {...props} dispose={null} onPointerDown={onHandleBanana}>
            <mesh
                geometry={nodes.Cube.geometry}
                material={materials.Material}
                position={[-4.65, 2.46, 0]}
                rotation={[0, 0, -0.68]}
            />
        </group>
    );
}

useGLTF.preload("/static/banana.glb");